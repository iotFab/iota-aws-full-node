#adapted from : https://github.com/Integralist/CloudFormation/blob/master/EC2.yml

AWSTemplateFormatVersion: 2010-09-09

# Parameters are referenced using the Ref property
# e.g. Ref: KeyNameParameter
#
# Parameters can be assigned a default value, but if not then the value
# needs to be provided when uploading the CloudFormation.
# If uploading via CLI then you'll provide a --parameters flag
# If uploading via the AWS console, a GUI will be provided
Parameters:
  KeyNameParameter:
    Description: "Optional: Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: String
    Default: ""
  TimeoutCfStackCreation:
    Description: "Enter the CloudFormation stack creation timeout (in seconds)"
    Type: String
    Default: 3600
    ConstraintDescription: "[0-9]+"
  InstanceTypeParameter:
    Type: String
    Description: "Enter an EC2 instance type"
    Default: t2.medium
  IriApiPortParameter:
    Description: "Enter the IOTA IRI API port"
    Type: Number
    Default: "14265"
  IriUdpPortParameter:
    Description: "Enter the IOTA IRI UDP port"
    Type: Number
    Default: "14600"
  IriTcpPortParameter:
    Description: "Enter the IOTA IRI TCP port"
    Type: Number
    Default: "15600"
  IriExternalApiIpParameter:
    Description: "Enter the IOTA IRI external API IP"
    Type: String
    Default: "0.0.0.0"
  IriInternalApiIpParameter:
    Description: "Enter the IOTA IRI internal API IP"
    Type: String
    Default: "127.0.0.1"
  IotaPmApiIpParameter:
    Description: "Enter the IOTA-pm API IP"
    Type: String
    Default: "127.0.0.1"
  IotaPmPortParameter:
    Description: "Enter the IOTA-pm API port"
    Type: Number
    Default: "9999"
  NelsonApiPortParameter:
    Description: "Enter the Nelson API port"
    Type: Number
    Default: "18600"
  NelsonPortParameter:
    Description: "Enter the Nelson port"
    Type: Number
    Default: "16600"
  NelsonApiIpParameter:
    Description: "Enter the Nelson API IP"
    Type: String
    Default: "127.0.0.1"
  NelsonIncomingMaxParameter:
    Description: "Maximum Nelson incoming connection"
    Type: Number
    Default: "5"
  NelsonOutgoingMaxParameter:
    Description: "Maximum Nelson outgoing connection"
    Type: Number
    Default: "4"
  NelsoCliVersionParameter:
    Description: "Nelson CLI version"
    Type: String
    Default: "0.3.16"
  IriVersionParameter:
    Description: "IRI version"
    Type: String
    Default: "1.5.0"
  DiskSize:
    Description: "GP2 Disk size"
    Type: number
    Default: "100"

# Mappings allow us to map a key to a corresponding set of named values
# So if our instance is brought up in the eu-west-1 region we can use
# AWS::Region to tell us the current zone and then use the intrinsic function
# Fn::FindInMap to return the relevant matched value
Mappings:
  RegionMap:
    us-west-1:
      AMI: "ami-45ead225"
    us-west-2:
      AMI: "ami-0def3275"
    us-east-1:
      AMI: "ami-aa2ea6d0"
    us-east-2:
      AMI: "ami-82f4dae7"
    ca-central-1:
      AMI: "ami-018b3065"
    eu-west-1:
      AMI: "ami-8fd760f6"
    eu-west-2:
      AMI: "ami-fcc4db98"
    eu-west-3:
      AMI: "ami-4262d53f"
    eu-central-1:
      AMI: "ami-df8406b0"
    ap-northeast-1:
      AMI: "ami-bec974d8"
    ap-northeast-2:
      AMI: "ami-3066c15e"
    ap-southeast-1:
      AMI: "ami-10acfb73"
    ap-southeast-2:
      AMI: "ami-cab258a8"
    ap-south-1:
      AMI: "ami-f3e5aa9c"
    sa-east-1:
      AMI: "ami-bf8ecbd3"

# Determine if a keypair name must be used
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyNameParameter, ""]]

# When pushing this CloudFormation we need to provide the public half of our key-pair
# See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
#
# Then when attempting to SSH into the instance we can provide the private half
# See https://gist.github.com/Integralist/438898d6164daebec0c9
Resources:
  Ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref DiskSize
            VolumeType: gp2
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !If [HasKeyName, !Ref KeyNameParameter, !Ref "AWS::NoValue"]
      SecurityGroupIds:
        - !Ref Ec2InstanceSecurityGroup
        - !If [
            HasKeyName,
            !Ref Ec2InstanceSecurityGroupSsh,
            !Ref "AWS::NoValue",
          ]

      # Select the correct AMI to load (based on the region the stack is created)
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "AMI"

      Tags:
        - Key: "Name"
          Value: !Sub "IOTA full node EC2 instance (${AWS::StackName})"

      # Amazon's Linux AMI comes with a Ubuntu package called cloud-init installed
      # This package simplifies running bootstrapping code on the EC2 instance
      #
      # We use the Fn::Base64 function to base64 encode the user data and to
      # allow parameters and references from the template to be substituted
      # in the script at runtime
      #
      # We also use a curl command to indicate to our WaitCondition resource
      # that the application has started successfully.
      # The stack creation will fail if the WaitCondition timeout is triggered.
      # The timeout is cancelled by the signal of the curl command
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -ex"
              - "\n"
              - 'apt update -qqy --fix-missing && sudo DEBIAN_FRONTEND=noninteractive apt-get -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" upgrade && sudo apt-get clean -y && sudo apt-get autoremove -y --purge'
              - "\n"
              - "apt install software-properties-common -y && sudo add-apt-repository ppa:webupd8team/java -y && sudo apt update"
              - "\n"
              - 'echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections && echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 seen true" | debconf-set-selections'
              - "\n"
              - "sudo apt install oracle-java8-installer curl wget jq -y && sudo apt install oracle-java8-set-default -y"
              - "\n"
              - 'sh -c 'echo JAVA_HOME="/usr/lib/jvm/java-8-oracle" >> /etc/environment' && source /etc/environment'
              - "\n"
              - "curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -"
              - "\n"
              - "useradd -s /usr/sbin/nologin -m iota"
              - "\n"
              - "sudo -u iota mkdir -p /home/iota/node /home/iota/node/ixi /home/iota/node/mainnetdb"
              - "\n"
              - !Sub "sudo -u iota wget -O /home/iota/node/iri-${IriVersionParameter}.jar https://github.com/iotaledger/iri/releases/download/v${IriVersionParameter}/iri-${IriVersionParameter}.jar"
              - "\n"
              - "cat << \"EOF\" | sudo tee /lib/systemd/system/iota.service\n"
              - "[Unit]\n"
              - "Description=IOTA IRI full node\n"
              - "After=network.target\n"
              - "[Service]\n"
              - "WorkingDirectory=/home/iota/node\n"
              - "User=iota\n"
              - "PrivateDevices=yes\n"
              - "Type=simple\n"
              - "ExecReload=/bin/kill -HUP $MAINPID\n"
              - "KillMode=mixed\n"
              - "KillSignal=SIGTERM\n"
              - "TimeoutStopSec=60\n"
              - !Sub "ExecStart=/usr/bin/java -Xmx3400 -Djava.net.preferIPv4Stack=true -jar iri-${IriVersionParameter}.jar -c iota.ini\n"
              - "Restart=on-failure\n"
              - "RestartSec=30\n"
              - "[Install]\n"
              - "WantedBy=multi-user.target\n"
              - "Alias=iota.service\n"
              - "EOF\n"
              - "sudo systemctl daemon-reload && sudo systemctl enable iota.service \n"
              - "cat << \"EOF\" | sudo -u iota tee /home/iota/node/iota.ini\n"
              - "[IRI]\n"
              - "PORT = "
              - Ref: "IriApiPortParameter"
              - "\n"
              - "UDP_RECEIVER_PORT = "
              - Ref: "IriUdpPortParameter"
              - "\n"
              - "TCP_RECEIVER_PORT = "
              - Ref: "IriTcpPortParameter"
              - "\n"
              - "API_HOST = "
              - Ref: "IriExternalApiIpParameter"
              - "\n"
              - "IXI_DIR = ixi\n"
              - "HEADLESS = true\n"
              - "DEBUG = false\n"
              - "TESTNET = false\n"
              - "DB_PATH = mainnetdb\n"
              - "RESCAN_DB = false\n"
              - "REMOTE_LIMIT_API=\"removeNeighbors, addNeighbors, interruptAttachingToTangle, attachToTangle, getNeighbors\"\n"
              - "NEIGHBORS = udp://94.156.128.15:14600 udp://185.181.8.149:14600\n"
              - "EOF\n"
              - "cd /tmp/ && curl -O http://db.iota.partners/iri-mainnetdb.tar.gz && sudo -u iota tar xzfv /tmp/iri-mainnetdb.tar.gz -C /home/iota/node/mainnetdb && rm /tmp/iri-mainnetdb.tar.gz"
              - "\n"
              - "sudo service iota start\n"
              - "echo '*/15 * * * * root bash -c \"bash <(curl -s https://gist.githubusercontent.com/zoran/48482038deda9ce5898c00f78d42f801/raw)\"' | sudo tee /etc/cron.d/iri_updater > /dev/null\n"
              - "apt-get install -y nodejs\n"
              - !Sub "sudo npm install -g nelson.cli@${NelsoCliVersionParameter}\n"
              - "sudo npm install -g iota-pm > /dev/null\n"
              - "useradd -s /usr/sbin/nologin -m nelson\n"
              - "cat << \"EOF\" | sudo -u nelson tee /home/nelson/config.ini\n"
              - "[nelson]\n"
              - "cycleInterval = 60\n"
              - "epochInterval = 300\n"
              - "IRIProtocol = any\n"
              - "apiPort = "
              - Ref: "NelsonApiPortParameter"
              - "\n"
              - "apiHostname = "
              - Ref: "NelsonApiIpParameter"
              - "\n"
              - "port = "
              - Ref: "NelsonPortParameter"
              - "\n"
              - "IRIHostname = "
              - Ref: "IriInternalApiIpParameter"
              - "\n"
              - "IRIPort = "
              - Ref: "IriApiPortParameter"
              - "\n"
              - "TCPPort = "
              - Ref: "IriTcpPortParameter"
              - "\n"
              - "UDPPort = "
              - Ref: "IriUdpPortParameter"
              - "\n"
              - "incomingMax = "
              - Ref: "NelsonIncomingMaxParameter"
              - "\n"
              - "outgoingMax = "
              - Ref: "NelsonOutgoingMaxParameter"
              - "\n"
              - "dataPath = data/neighbors.db\n"
              - "isMaster = false\n"
              - "silent = false\n"
              - "gui = false\n"
              - "getNeighbors = https://raw.githubusercontent.com/SemkoDev/nelson.cli/master/ENTRYNODES\n"
              - "neighbors[] = mainnet.deviota.com/16600\n"
              - "neighbors[] = mainnet2.deviota.com/16600\n"
              - "neighbors[] = mainnet3.deviota.com/16600\n"
              - "neighbors[] = iotairi.tt-tec.net/16600\n"
              - "EOF\n"
              - "\n"
              - "cat << \"EOF\" | sudo tee /lib/systemd/system/nelson.service\n"
              - "[Unit]\n"
              - "Description=CarrIOTA Nelson\n"
              - "After=network.target\n"
              - "[Service]\n"
              - "WorkingDirectory=/home/nelson\n"
              - "User=nelson\n"
              - "PrivateDevices=yes\n"
              - "Type=simple\n"
              - "ExecReload=/bin/kill -HUP $MAINPID\n"
              - "KillMode=mixed\n"
              - "KillSignal=SIGTERM\n"
              - "TimeoutStopSec=60\n"
              - "ExecStart=/usr/bin/nelson --config /home/nelson/config.ini\n"
              - "Restart=on-failure\n"
              - "RestartSec=30\n"
              - "[Install]\n"
              - "WantedBy=multi-user.target\n"
              - "Alias=nelson.service\n"
              - "EOF\n"
              - "sudo systemctl daemon-reload && systemctl enable nelson.service\n"
              - "sudo service nelson start\n"
              - "cat << \"EOF\" | sudo tee /lib/systemd/system/iotapm.service\n"
              - "[Unit]\n"
              - "Description=Iota Peer Manager\n"
              - "After=network.target\n"
              - "[Service]\n"
              - "WorkingDirectory=/home/iota\n"
              - "User=iota\n"
              - "PrivateDevices=yes\n"
              - "Type=simple\n"
              - "ExecReload=/bin/kill -HUP $MAINPID\n"
              - "KillMode=mixed\n"
              - "KillSignal=SIGTERM\n"
              - "TimeoutStopSec=60\n"
              - "ExecStart=/usr/bin/iota-pm -i http://"
              - Ref: "IriInternalApiIpParameter"
              - ":"
              - Ref: "IriApiPortParameter"
              - " -p "
              - Ref: "IotaPmApiIpParameter"
              - ":"
              - Ref: "IotaPmPortParameter"
              - "\n"
              - "Restart=on-failure\n"
              - "RestartSec=30\n"
              - "[Install]\n"
              - "WantedBy=multi-user.target\n"
              - "Alias=iotapm.service\n"
              - "EOF\n"
              - "\n"
              - "sudo systemctl daemon-reload && systemctl enable iotapm.service\n"
              - "sudo service iotapm start\n"
              - "\n"
              - 'curl -X PUT -H 'Content-Type:' --data-binary '{"Status" : "SUCCESS",'
              - '"Reason" : "The iota full node is ready",'
              - '"UniqueId" : "Iota",'
              - '"Data" : "Done"}' '
              - '"'
              - Ref: "WaitForInstanceWaitHandle"
              - "\"\n"

  # The following key has no properties.
  # I know that seems odd but there is a reason:
  #
  # When you reference the WaitConditionHandle resource
  # (see WaitForInstance below and the curl command above),
  # AWS CloudFormation will return a pre-signed URL.
  #
  # You then pass this URL to applications or scripts that are running on your
  # Amazon EC2 instances to send signals to that URL
  WaitForInstanceWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"
    Properties: {}

  # Our WaitCondition depends on the EC2 instance being booted-up first
  # CloudFormation parameter 'TimeoutCfStackCreation' specifies the number of seconds to wait
  WaitForInstance:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: "Ec2Instance"
    Properties:
      Handle:
        Ref: "WaitForInstanceWaitHandle"
      Timeout: !Ref TimeoutCfStackCreation

    # We're allowing any IP address to access port 22, 14265, 14600 and 15600
    # SSH tunnel will be used to access iota-pm
  Ec2InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "IOTA full node security group (${AWS::StackName})"
      GroupDescription: "Enable access to IOTA full node via ports 14265, 14600, 15600 and SSH access via port 22"
      SecurityGroupIngress:
        - IpProtocol: "udp"
          FromPort: "14600"
          ToPort: "14600"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "16600"
          ToPort: "16600"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "14265"
          ToPort: "14265"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "15600"
          ToPort: "15600"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: !Sub "IOTA full node security group (${AWS::StackName})"

  Ec2InstanceSecurityGroupSsh:
    Type: "AWS::EC2::SecurityGroup"
    Condition: HasKeyName
    Properties:
      GroupName: !Sub "IOTA full node security group ssh (${AWS::StackName})"
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: !Sub "IOTA full node security group ssh (${AWS::StackName})"
# The optional Outputs section declares the values that you want to return
# in response to describe stack calls.
# This output appears in the AWS console
Outputs:
  PortForwardingCommand:
    Description: 'This command can be used to access your iota-pm. Ensure you adapt your keypair path (-i "/mypath/to/keypair.pem")'
    Value:
      !If [
        HasKeyName,
        !Sub 'ssh -i "${KeyNameParameter}.pem" -p 22 -L ${IriApiPortParameter}:localhost:${IriApiPortParameter} -L ${IotaPmPortParameter}:localhost:${IotaPmPortParameter} ubuntu@${Ec2Instance.PublicDnsName}',
        "Please restart the deployment with an EC2 keypair",
      ]
  IotaPmWebsite:
    Description: "This link allow you to manage your neighbours via browser"
    Value:
      !If [
        HasKeyName,
        !Sub "http://${IotaPmApiIpParameter}:${IotaPmPortParameter}",
        "Please restart the deployment with an EC2 keypair",
      ]
  CustomNodeURL:
    Description: "This address can be used to connect your wallet directly to your node"
    Value: !Sub "http://${Ec2Instance.PublicDnsName}:${IriApiPortParameter}"
